#version 430 core
layout (std140, binding=0) uniform attratorBlock
{
	vec4 attractor[1024 * 4];
};

layout (local_size_x = 1024) in;

layout (rgba32f, binding = 0) uniform imageBuffer positionBuffer;
layout (rgba32f, binding = 1) uniform imageBuffer velocityBuffer;

uniform float dt = 0.5f;

void main()
{
    // get position and velocity
	vec4 position = imageLoad(positionBuffer, int(gl_GlobalInvocationID.x));
	vec4 velocity = imageLoad(velocityBuffer, int(gl_GlobalInvocationID.x));

    int attractorIndex = int(gl_GlobalInvocationID.x) % (1024*4);
	vec3 delta = attractor[attractorIndex].xyz - position.xyz;
	vec3 direction = normalize(delta);
	float dist = length(delta);
	if (dist >= 0.15)
	{
		position.xyz += velocity.xyz * dist  * 0.01 * direction;
		// position.xyz += velocity.xyz * dist  * 0.1;
	}
	
	// restore
	imageStore(positionBuffer, int(gl_GlobalInvocationID.x), position);
	imageStore(velocityBuffer, int(gl_GlobalInvocationID.x), velocity);
}

